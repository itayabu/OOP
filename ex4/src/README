itayabu 

=======================
=  File Description: = 
=======================
SimpleSet- Interface, help compare between CollectionFacadeSet and SimpleHashSet
CollectionFacadeSet- facade for collections of string acting like set.
SimpleHashSet- abstract class for hash sets.
OpenHashSet- hash set implementation through quadratic probing.
ChainedHashSet- hash set implementation through chaining, using 
	MyLinkedListFacade instances as chains.
MyLinkedListFacade- nested class in ChainedHashSet, interfacing LinkedList
	as a chain
SimpleSetPerformanceAnalyzer- check five Sets and compare their computing
	times on various elements.
TimeCounts- nested class in SimpleSetPerformanceAnalyzer, hold name,
	SimpleSet to work with and many long numbers to check for time analysts
	

============
=  Design: = 
============
The main challenge in design was how to implement ChainedHashSet's chains.
At first I started to build my own kind of LinkedList, and then saw it was
"highly Unrecommended" so I built another kind of Facade more accurate 
for my purposes, I thought of using the CollectionFacadeSet I already
built but it didnt have enough "reaching" to what I needed, so I built a new 
one. after "nested classes" lecture It seemed more reasonable to nest the class
inside the ChainedHashSet class because its a special type created to serve 
this only purpose.

OpenHashSet delete mechanism: I Had several ideas, using boolean array or kind
of type containing a boolean seemed a big waste of memory.
I used a string named "nulled" and used its pointer for checking.
meaning- to see if a cell was deleted I didnt compare the cell value using
the .equals(nulled)- witch would have cause errors if i had to add the string's
value to the set. But used identity hash code of system operands that check 
their location on memory, so no string will ever have the "nulled" memory 
address. the system.identityHashCode() is is in system- just like println 
and therefore I figured its "legal" to use it.


SimpleSetPerformanceAnalyzer- came out a bit ugly and many "code repetition",
but I didnt want the time count to run while code is moving between methods 
so it seemed more proper.


=================
= time analyst=
=================
for data1.txt, the time it took each structure to initialize:
OpenHashCell 281946
ChainedHashSet 173927
LinkedList 11
TreeSet 21
HashSet 28
quickest structure: LinkedList
for data2.txt, the time it took each structure to initialize:
OpenHashCell 30
ChainedHashSet 764
LinkedList 7
TreeSet 18
HashSet 13
quickest structure: LinkedList
for OpenHashCelldata1 initialize was 281946 longer than data2
for ChainedHashSetdata1 initialize was 173163 longer than data2
for LinkedListdata1 initialize was 4 longer than data2
for TreeSetdata1 initialize was 3 longer than data2
for HashSetdata1 initialize was 15 longer than data2
for data1.txt, the time it took each structure to initialize:
OpenHashCell 97253
ChainedHashSet 160148
LinkedList 15
TreeSet 29
HashSet 24
quickest structure: LinkedList
for data2.txt, the time it took each structure to initialize:
OpenHashCell 73
ChainedHashSet 740
LinkedList 6
TreeSet 13
HashSet 17
quickest structure: LinkedList
for OpenHashCelldata1 initialize was 97180 longer than data2
for ChainedHashSetdata1 initialize was 159408 longer than data2
for LinkedListdata1 initialize was 9 longer than data2
for TreeSetdata1 initialize was 16 longer than data2
for HashSetdata1 initialize was 7 longer than data2
for data1.txt, the time took structures to return contains hi
OpenHashCell 0
ChainedHashSet 0
LinkedList 0
TreeSet 0
HashSet 1
best time: OpenHashCell
for data1.txt, the time took structures to return contains number
OpenHashCell 0
ChainedHashSet 1
LinkedList 0
TreeSet 0
HashSet 0
best time: OpenHashCell
for data1
OpenHashCell finding the number took 0 longer than Hi
ChainedHashSet finding the number took 1 longer than Hi
LinkedList finding the number took 0 longer than Hi
TreeSet finding the number took 0 longer than Hi
HashSet finding the number took -1 longer than Hi
for data2.txt, the time took structures to return contains hi
OpenHashCell 0
ChainedHashSet 0
LinkedList 0
TreeSet 0
HashSet 0
best time: OpenHashCell
for data2.txt, the time took structures to return contains number
OpenHashCell 0
ChainedHashSet 0
LinkedList 0
TreeSet 0
HashSet 0
best time: OpenHashCell
for data2
OpenHashCell finding hi took 0 longer than the number
ChainedHashSet finding hi took 0 longer than the number
LinkedList finding hi took 0 longer than the number
TreeSet finding hi took 0 longer than the number
HashSet finding hi took 0 longer than the number

=============================
=  Questions and answers: =
=============================
Q: Account, in separate, for ChainedHashSet’s and OpenHashSet’s bad
	 results for data1.txt. 
A: in data1 all the Strings had the same hashCode. in ChainedHashSet, all the
	values are in one cell of the array, so to check if a value already exist
	take much time because there is need to go through all existing values.
	OpenHashSet takes even longer because of several reasons:
	- the hash function may step over the same cell few times before it 
		finishes to run.
	- in add, even after checking there is no value duplicate value, to add 
		a value to its place need to run all over the hash function again, 
		same in delete.
		
Q: Summarize the strengths and weaknesses of each of the data structures as reflected by 
	the results. Which would you use for which purposes? 
A: all java's collections took 0 time (witch U guess is just very low amount 
	that didnt measured) to operate searching so I cant say witch is preferred,
	as to building, LinkedList was the fastest.
	
Q: How did your implementations compare to Java’s built in HashSet? 
A: they are bad, very bad. It made me try to make my sets quicker, late night
	after school challenge, but I'm not sure how far can I go.

Q: What results surprised you and which did you expect?
	(-1 points if you didn’t list java’s HashSet performance on data1.txt 
	as surprising. Can you explain it? Can google?)
A: hashSet!!! of course. stackoverflow explain it by containing a large hash
	map, and using the value as a key for an irrelevant object. meaning hasSet
	prefer time saving over memory saving. 
	
Q: If you implemented the modulo efficiently (appendix A), how significant was the
	 speed up? And how awesome is that?
A: testing it...
	time take for OpenHashSet initialize on data1.txt with "/": 671192
	time take for OpenHashSet initialize on data1.txt with "&": 281946
	on a scale of 1 to 10 of awsomeness i'd give it 7 =]

=======================
=  source files: = 
=======================
this file		README
java file		SimpleSet
java file		SimpleHashSet
java file		OpenHashSet
java file		ChainedHashSet
java file		CollectionFacadeSet
java file		SimpleSetPerformanceAnalyzer