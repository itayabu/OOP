itayabul
assafm04


Files included:

1:	main
	1.1 Sjavac.java 
	
	
2:	instance
	2.1 FieldInstance.java
	2.2 FuncInstance.java
	2.3 Instance.java
	2.4 InstanceFactory.java
	2.5 ValidateFunction.java
	2.6 ValidateInstanceValue.java
	
	
3:	type
	3.1 Type.java
	3.2 ValidateBoolValue.java
	3.3 ValidateCharValue.java
	3.4 ValidateDoubleValue.java
	3.5 ValidateIntValue.java
	3.6 ValidateStringValue.java
	3.7 ValidateType.java

	type.exceptions
	3.8.1 BadTypeNameException.java
	3.8.2 TypeException.java
	
	
4:	parser
	4.1 LineReader.java
	
	
5.	exceptions
	5.1		AssignmentTypesArntConsist.java
	5.2		BadInputException.java
	5.3		BadLineEndingException.java
	5.4		BadStructureOfBlockLineException.java
	5.5		CompilerError.java
	5.6		DuplicateInstaceException.java
	5.7		IlegalCommentException.java
	5.8		IlegalNameException.java
	5.9		IlegaMemberUseException.java
	5.10 	IllegaIntException.java
	5.11	IllegalLineException.java
	5.12	IllegalParameterInput.java
	5.13	MemberDeclarationException.java
	5.14	MemberDoesNotExistException.java
	5.15	NoClosureToParenthesesException.java
	5.16	TypeConversionException.java
	5.17	VariableNotSimpleInGlobalException.java
	5.18	VoidVarException.java


6.	validations
	6.1 InstanceArrayValidator.java
	6.2 ValidateBlocks.java
	

Design:
	when we started this project we argued about the purpose of this code,
	we came to realize that this is meant to be a tool box in a library, thus 
	the conclusion was to make this tool does not depend on input and therefore
	we saw it fit to make it static. 
	for modularity we divided the code to a few main components, we tried not 
	to divide the code into too many segments so it will remain readable and 
	understandable.
	of course we used the "factory" to implement the single-choice design.
	we did try to maintain open-close principle mainly on the "type" section,
	though it was very hard to implement it on the rest of the code.
	we used a lot of String methods to manage the input mainly with "contains",
	"split","replace" etc... in those case we did'nt see a reason to build a new 
	regex when Java offers us those built-in methods.
	we had a dispute weather to use a Hash-map data structure or the Linked-list
	and finally we decided to use the linked list so every block will hold it's
	own linked list.  


answers to questions:

	question 6.1 - it's true that some methods are boolean, and that it's better
	to handle errors on your own, and so we did, in place we saw it right, in 
	other places both for readability and for better error management 
	we used exceptions. moreover in this prject's case there was no need to 
	handle the errors locally, so we threw the exceptions all the way up the 
	hierarchy. 
	
	question 6.2.1 - this code is open-closed type wise, all we must do is add
	the new type to the "Type" class, add a validation method and to add
	its name as a case inside the "Type" class. 
		
	question 6.2.2 - if we would like to add the "if-else" we need to add:
	inside "parseMethod" the line of "if" remains to the end of its block
	so we can ask before the reading of the new line if it is an "if" call and 
	if it is then its legal to have an else call afterwards.
		
	question 6.3 - there were no two main regex we can say were most used and 
	we can't hold greater value for some upon others but we did strugle 
	the most with these:
	METHOD_DECLERATION = "[a-zA-Z][_\\w]* ?\\(.*\\) ?\\{" , this regex was one
	of those regex we used the most, that's because it's a main regex in which 
	we check for method declaration its not only essential to check the
	structure of the code but it also allow us to create a good data base for
	the rest of the code (inside those blocks).
	
	the other ONES were:
	the validation of values input for example:
	INT_VAL_STR = "-?\\s*_?[a-zA-z]+\\w*\\s*\\(?\\.*?\\)?\\s*" , this one
	tells you if the input value of an int is legal
	
	 
